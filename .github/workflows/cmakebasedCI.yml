name: CMake on multiple platform with multiple compilers

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release, Debug]
        cpp_compiler: [g++, clang++]
        include:
          - os: macos-latest
            cpp_compiler: clang++
          - os: ubuntu-latest
            cpp_compiler: g++
          - os: ubuntu-latest
            cpp_compiler: clang++
        exclude:
          - os: macos-latest
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install MPI (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y mpich
  
    - name: Install MPI (macOS)
      if: runner.os == 'macOS'
      run: brew install mpich gcc

    - name: Debug Fortran Compiler
      if: runner.os == 'macOS'
      run: |
        echo "Checking Fortran Compiler..."
        which gfortran || echo "gfortran not found in PATH"
        ls -l /usr/local/bin/gfortran* || echo "No gfortran in /usr/local/bin"
        ls -l /opt/homebrew/bin/gfortran* || echo "No gfortran in /opt/homebrew/bin"
        gfortran --version || echo "gfortran command not working"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_Fortran_COMPILER=$(which gfortran || echo "/usr/local/bin/gfortran-13") \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --build-config ${{ matrix.build_type }}
        ctest -R test_example_pass_regexp -V